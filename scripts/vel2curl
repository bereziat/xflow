#! /bin/bash
#
# Compute curl of vectors field
# Curl(u,v) = v_x - u_y
#
# Dominique Béréziat (c) 2013

perror () { echo $*; exit 1; }

TMP=/tmp/vel2curl$$

case $1 in
    -help|-Help)
	echo 'Compute curl of vectors field for displaying in xflow'
	echo 'Usage : vel2curl input.uv output.inr'
	exit 1
	;;
esac

which recfilters > /dev/null || perror "Fatal: command recfilters not found"

case $1 in
    -)  cat > $TMP-0.inr ;;
    *)  cat $1 > $TMP-0.inr;;
esac
OUTPUT=$2


# Compute curl    
extg -iv 2 -v 1 $TMP-0.inr | recfilters -cont 10 -s 1 -x 1 -y -1 -z -1 > $TMP-1.inr
extg -iv 1 -v 1 $TMP-0.inr | recfilters -cont 10 -s 1 -x -1 -y 1 -z -1 | so $TMP-1.inr - > $TMP-2.inr
rm $TMP-0.inr
set -- `ical $TMP-2.inr`
min=$1
max=$3
echo min=$1 max=$3 > /dev/stderr

# Normalization and conversion to 1-byte
case $OUTPUT in
    "-"|"") norma $TMP-2.inr | cco -f -hdr=8 > $TMP-3.inr ;;
    *) norma $TMP-2.inr | cco -f -hdr=8 - $OUTPUT ;;
esac

rm -f $TMP-1.inr $TMP-2.inr

# Color palet computation
echo "vmin=$min
vmax=$max
if( vmin == vmax) {
  if( vmin > 0) {
    for( i=0; i<256; i++)
      0
    for( i=0; i<256; i++)
      0
    for( i=0; i<256; i++)
      255
  } else {
    for( i=0; i<256; i++)
      255
    for( i=0; i<256; i++)
      0
    for( i=0; i<256; i++)
      0
  } 
} else if ( vmin > 0) {
    for( i=0; i<256; i++)
      0
    for( i=0; i<256; i++)
      0
    for( i=0; i<256; i++)
      i
} else if( vmax < 0) {
    for( i=0; i<256; i++)
      i
    for( i=0; i<256; i++)
      0
    for( i=0; i<256; i++)
      0
} else {
  g = 255 * vmax/(vmax-vmin)
  for( i=0; i<g; i++)
      255 - i*255/g
  for( i=g; i<256; i++)
      0
  for( i=0; i<256; i++)
      0
  for( i=0; i<g; i++)
      0
  for( i=g; i<256; i++)
      (i-g)*255/(255-g)
}
" | bc -l | sed 's/\..*//' | cim -x 256 -y 3 -f  > $TMP-pal.inr

case $OUTPUT in
    "-"|"")
	ifmt -setct  $TMP-pal.inr $TMP-3.inr 
	cat $TMP-3.inr
	rm -f $TMP-3.inr
	;;
    *)
	ifmt -setct  $TMP-pal.inr $OUTPUT
	;;
esac
rm -f $TMP-pal.inr
